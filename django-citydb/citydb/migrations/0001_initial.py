# Generated by Django 5.0.1 on 2024-03-19 09:11

import citydb.modules.energy.core.heatexchange
import django.contrib.gis.db.models.fields
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="CityObject",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("gmlid", models.CharField(blank=True, max_length=256, null=True)),
                (
                    "gmlid_codespace",
                    models.CharField(blank=True, max_length=1000, null=True),
                ),
                ("name", models.CharField(blank=True, max_length=1000, null=True)),
                (
                    "name_codespace",
                    models.CharField(blank=True, max_length=4000, null=True),
                ),
                (
                    "description",
                    models.CharField(blank=True, max_length=4000, null=True),
                ),
                (
                    "envelope",
                    django.contrib.gis.db.models.fields.PolygonField(
                        blank=True, dim=3, null=True, srid=25832
                    ),
                ),
                ("creation_date", models.DateTimeField(blank=True, null=True)),
                ("termination_date", models.DateTimeField(blank=True, null=True)),
                (
                    "relative_to_terrain",
                    models.CharField(blank=True, max_length=256, null=True),
                ),
                (
                    "relative_to_water",
                    models.CharField(blank=True, max_length=256, null=True),
                ),
                ("last_modification_date", models.DateTimeField(blank=True, null=True)),
                (
                    "updating_person",
                    models.CharField(blank=True, max_length=256, null=True),
                ),
                (
                    "reason_for_update",
                    models.CharField(blank=True, max_length=4000, null=True),
                ),
                ("lineage", models.CharField(blank=True, max_length=256, null=True)),
                ("xml_source", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "cityobject",
                "abstract": False,
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Address",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("gmlid", models.CharField(blank=True, max_length=256, null=True)),
                (
                    "gmlid_codespace",
                    models.CharField(blank=True, max_length=1000, null=True),
                ),
                ("street", models.CharField(blank=True, max_length=1000, null=True)),
                (
                    "house_number",
                    models.CharField(blank=True, max_length=256, null=True),
                ),
                ("po_box", models.CharField(blank=True, max_length=256, null=True)),
                ("zip_code", models.CharField(blank=True, max_length=256, null=True)),
                ("city", models.CharField(blank=True, max_length=256, null=True)),
                ("state", models.CharField(blank=True, max_length=256, null=True)),
                ("country", models.CharField(blank=True, max_length=256, null=True)),
                (
                    "multi_point",
                    django.contrib.gis.db.models.fields.MultiPointField(
                        blank=True, dim=3, null=True, srid=25832
                    ),
                ),
                ("xal_source", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "address",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="CityModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("gmlid", models.CharField(blank=True, max_length=256, null=True)),
                (
                    "gmlid_codespace",
                    models.CharField(blank=True, max_length=1000, null=True),
                ),
                ("name", models.CharField(blank=True, max_length=1000, null=True)),
                (
                    "name_codespace",
                    models.CharField(blank=True, max_length=4000, null=True),
                ),
                (
                    "description",
                    models.CharField(blank=True, max_length=4000, null=True),
                ),
                (
                    "envelope",
                    django.contrib.gis.db.models.fields.PolygonField(
                        blank=True, dim=3, null=True, srid=31468
                    ),
                ),
                ("creation_date", models.DateTimeField(blank=True, null=True)),
                ("termination_date", models.DateTimeField(blank=True, null=True)),
                ("last_modification_date", models.DateTimeField(blank=True, null=True)),
                (
                    "updating_person",
                    models.CharField(blank=True, max_length=256, null=True),
                ),
                (
                    "reason_for_update",
                    models.CharField(blank=True, max_length=4000, null=True),
                ),
                ("lineage", models.CharField(blank=True, max_length=256, null=True)),
            ],
            options={
                "db_table": "citymodel",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="DailySchedule",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "daytype",
                    models.CharField(
                        blank=True, db_column="daytype", null=True, verbose_name=1000
                    ),
                ),
            ],
            options={
                "db_table": "ng_dailyschedule",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Emissivity",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "fraction",
                    models.DecimalField(
                        blank=True, decimal_places=65535, max_digits=65535, null=True
                    ),
                ),
                (
                    "fraction_uom",
                    models.CharField(blank=True, max_length=1000, null=True),
                ),
                (
                    "surface",
                    models.CharField(
                        blank=True,
                        choices=[("inside", "inside"), ("outside", "outside")],
                        max_length=1000,
                        null=True,
                    ),
                ),
            ],
            options={
                "db_table": "ng_emissivity",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="EnergyPerformanceCertificate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "certificationid",
                    models.CharField(blank=True, max_length=1000, null=True),
                ),
                ("name", models.CharField(blank=True, max_length=1000, null=True)),
                ("rating", models.CharField(blank=True, max_length=1000, null=True)),
            ],
            options={
                "db_table": "ng_energyperformancecer",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="HeatExchangeType",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        db_column="id",
                        default=citydb.modules.energy.core.heatexchange.sequence_id,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "convective_fraction",
                    models.FloatField(
                        blank=True, db_column="convectivefraction", null=True
                    ),
                ),
                (
                    "convective_fraction_uom",
                    models.CharField(
                        blank=True,
                        db_column="convectivefraction_uom",
                        max_length=1000,
                        null=True,
                    ),
                ),
                (
                    "latent_fraction",
                    models.FloatField(
                        blank=True, db_column="latentfraction", null=True
                    ),
                ),
                (
                    "latent_fraction_uom",
                    models.CharField(
                        blank=True,
                        db_column="latentfraction_uom",
                        max_length=1000,
                        null=True,
                    ),
                ),
                (
                    "radiant_fraction",
                    models.FloatField(
                        blank=True, db_column="radiantfraction", null=True
                    ),
                ),
                (
                    "radiant_fraction_uom",
                    models.CharField(
                        blank=True,
                        db_column="radiantfraction_uom",
                        max_length=1000,
                        null=True,
                    ),
                ),
                (
                    "total_value",
                    models.FloatField(blank=True, db_column="totalvalue", null=True),
                ),
                (
                    "total_value_uom",
                    models.CharField(
                        blank=True,
                        db_column="totalvalue_uom",
                        max_length=1000,
                        null=True,
                    ),
                ),
            ],
            options={
                "db_table": "ng_heatexchangetype",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="NgPeriodOfYear",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "timeperiodprop_beginposition",
                    models.DateTimeField(db_column="timeperiodprop_beginposition"),
                ),
                (
                    "timeperiodproper_endposition",
                    models.DateTimeField(db_column="timeperiodproper_endposition"),
                ),
            ],
            options={
                "db_table": "ng_periodofyear",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="ObjectClass",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("classname", models.CharField(blank=True, max_length=256, null=True)),
            ],
            options={
                "db_table": "objectclass",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="OpticalProperties",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "glazing_ratio",
                    models.DecimalField(
                        blank=True,
                        db_column="glazingratio",
                        decimal_places=65535,
                        max_digits=65535,
                        null=True,
                    ),
                ),
                (
                    "glazing_ratio_uom",
                    models.CharField(
                        blank=True,
                        db_column="glazingratio_uom",
                        max_length=1000,
                        null=True,
                    ),
                ),
            ],
            options={
                "db_table": "ng_opticalproperties",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Reflectance",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "fraction",
                    models.DecimalField(
                        blank=True, decimal_places=65535, max_digits=65535, null=True
                    ),
                ),
                (
                    "fraction_uom",
                    models.CharField(blank=True, max_length=1000, null=True),
                ),
                (
                    "surface",
                    models.CharField(
                        blank=True,
                        choices=[("inside", "inside"), ("outside", "outside")],
                        max_length=1000,
                        null=True,
                    ),
                ),
                (
                    "wavelength_range",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("solar", "solar"),
                            ("infrared", "infrared"),
                            ("visible", "visible"),
                            ("total", "total"),
                        ],
                        db_column="wavelengthrange",
                        max_length=1000,
                        null=True,
                    ),
                ),
            ],
            options={
                "db_table": "ng_reflectance",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="RefurbishmentMeasure",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "description",
                    models.CharField(blank=True, max_length=1000, null=True),
                ),
                (
                    "level_field",
                    models.CharField(
                        blank=True, db_column="level_", max_length=1000, null=True
                    ),
                ),
                (
                    "level_codespace",
                    models.CharField(blank=True, max_length=1000, null=True),
                ),
            ],
            options={
                "db_table": "ng_refurbishmentmeasure",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="ShadingType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "maximum_cover_ratio",
                    models.DecimalField(
                        blank=True,
                        db_column="maximumcoverratio",
                        decimal_places=65535,
                        max_digits=65535,
                        null=True,
                    ),
                ),
                (
                    "maximum_cover_ratio_uom",
                    models.CharField(
                        blank=True,
                        db_column="maximumcoverratio_uom",
                        max_length=1000,
                        null=True,
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=1000, null=True)),
            ],
            options={
                "db_table": "ng_shadingtype",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="SurfaceGeometry",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("gmlid", models.CharField(blank=True, max_length=256, null=True)),
                (
                    "gmlid_codespace",
                    models.CharField(blank=True, max_length=1000, null=True),
                ),
                ("is_solid", models.FloatField(blank=True, null=True)),
                ("is_composite", models.FloatField(blank=True, null=True)),
                ("is_triangulated", models.FloatField(blank=True, null=True)),
                ("is_xlink", models.FloatField(blank=True, null=True)),
                ("is_reverse", models.FloatField(blank=True, null=True)),
                (
                    "geometry",
                    django.contrib.gis.db.models.fields.GeometryField(
                        blank=True, null=True, srid=25832
                    ),
                ),
                (
                    "implicit_geometry",
                    django.contrib.gis.db.models.fields.PolygonField(
                        blank=True, dim=3, null=True, srid=4326
                    ),
                ),
            ],
            options={
                "db_table": "surface_geometry",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Transmittance",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "fraction",
                    models.DecimalField(
                        blank=True, decimal_places=65535, max_digits=65535, null=True
                    ),
                ),
                (
                    "fraction_uom",
                    models.CharField(blank=True, max_length=1000, null=True),
                ),
                (
                    "wavelength_range",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("solar", "solar"),
                            ("infrared", "infrared"),
                            ("visible", "visible"),
                            ("total", "total"),
                        ],
                        db_column="wavelengthrange",
                        max_length=1000,
                        null=True,
                    ),
                ),
            ],
            options={
                "db_table": "ng_transmittance",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="AbstractConstruction",
            fields=[
                (
                    "_parent_link",
                    models.OneToOneField(
                        db_column="id",
                        default=None,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="_abstract_construction_obj",
                        serialize=False,
                        to="citydb.cityobject",
                    ),
                ),
            ],
            options={
                "db_table": "ng_construction",
                "managed": False,
            },
            bases=("citydb.cityobject",),
        ),
        migrations.CreateModel(
            name="AbstractEnergySystem",
            fields=[
                (
                    "_parent_link",
                    models.OneToOneField(
                        db_column="id",
                        default=None,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="_abstract_energy_system_obj",
                        serialize=False,
                        to="citydb.cityobject",
                    ),
                ),
                ("model", models.CharField(blank=True, max_length=1000, null=True)),
                (
                    "number_of_devices",
                    models.IntegerField(
                        blank=True, db_column="numberofdevices", null=True
                    ),
                ),
                (
                    "year_of_manufacture",
                    models.DateField(
                        blank=True, db_column="yearofmanufacure", null=True
                    ),
                ),
            ],
            options={
                "db_table": "ng_energysystem",
                "managed": False,
            },
            bases=("citydb.cityobject",),
        ),
        migrations.CreateModel(
            name="AbstractMaterial",
            fields=[
                (
                    "_parent_link",
                    models.OneToOneField(
                        db_column="id",
                        default=None,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="_abstract_material_obj",
                        serialize=False,
                        to="citydb.cityobject",
                    ),
                ),
            ],
            options={
                "db_table": "ng_material",
                "managed": False,
            },
            bases=("citydb.cityobject",),
        ),
        migrations.CreateModel(
            name="Building",
            fields=[
                (
                    "_parent_link",
                    models.OneToOneField(
                        db_column="id",
                        default=None,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="building_obj",
                        serialize=False,
                        to="citydb.cityobject",
                    ),
                ),
                (
                    "class_field",
                    models.CharField(
                        blank=True, db_column="class", max_length=256, null=True
                    ),
                ),
                (
                    "class_codespace",
                    models.CharField(blank=True, max_length=4000, null=True),
                ),
                ("function", models.CharField(blank=True, max_length=1000, null=True)),
                (
                    "function_codespace",
                    models.CharField(blank=True, max_length=4000, null=True),
                ),
                ("usage", models.CharField(blank=True, max_length=1000, null=True)),
                (
                    "usage_codespace",
                    models.CharField(blank=True, max_length=4000, null=True),
                ),
                ("year_of_construction", models.DateField(blank=True, null=True)),
                ("year_of_demolition", models.DateField(blank=True, null=True)),
                ("roof_type", models.CharField(blank=True, max_length=256, null=True)),
                (
                    "roof_type_codespace",
                    models.CharField(blank=True, max_length=4000, null=True),
                ),
                ("measured_height", models.FloatField(blank=True, null=True)),
                (
                    "measured_height_unit",
                    models.CharField(blank=True, max_length=4000, null=True),
                ),
                ("storeys_above_ground", models.IntegerField(blank=True, null=True)),
                ("storeys_below_ground", models.IntegerField(blank=True, null=True)),
                (
                    "storey_heights_above_ground",
                    models.FloatField(blank=True, null=True),
                ),
                (
                    "storey_heights_ag_unit",
                    models.CharField(blank=True, max_length=4000, null=True),
                ),
                (
                    "storey_heights_below_ground",
                    models.CharField(blank=True, max_length=4000, null=True),
                ),
                (
                    "storey_heights_bg_unit",
                    models.CharField(blank=True, max_length=4000, null=True),
                ),
                (
                    "lod1_terrain_intersection",
                    django.contrib.gis.db.models.fields.MultiLineStringField(
                        blank=True, dim=3, null=True, srid=25832
                    ),
                ),
                (
                    "lod2_terrain_intersection",
                    django.contrib.gis.db.models.fields.MultiLineStringField(
                        blank=True, dim=3, null=True, srid=25832
                    ),
                ),
                (
                    "lod3_terrain_intersection",
                    django.contrib.gis.db.models.fields.MultiLineStringField(
                        blank=True, dim=3, null=True, srid=25832
                    ),
                ),
                (
                    "lod4_terrain_intersection",
                    django.contrib.gis.db.models.fields.MultiLineStringField(
                        blank=True, dim=3, null=True, srid=25832
                    ),
                ),
                (
                    "lod2_multi_curve",
                    django.contrib.gis.db.models.fields.MultiLineStringField(
                        blank=True, dim=3, null=True, srid=25832
                    ),
                ),
                (
                    "lod3_multi_curve",
                    django.contrib.gis.db.models.fields.MultiLineStringField(
                        blank=True, dim=3, null=True, srid=25832
                    ),
                ),
                (
                    "lod4_multi_curve",
                    django.contrib.gis.db.models.fields.MultiLineStringField(
                        blank=True, dim=3, null=True, srid=25832
                    ),
                ),
            ],
            options={
                "db_table": "building",
                "abstract": False,
                "managed": False,
            },
            bases=("citydb.cityobject",),
        ),
        migrations.CreateModel(
            name="BuildingUnit",
            fields=[
                (
                    "_parent_link",
                    models.OneToOneField(
                        db_column="id",
                        default=None,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="buildingunit_obj",
                        serialize=False,
                        to="citydb.cityobject",
                    ),
                ),
                (
                    "number_of_rooms",
                    models.IntegerField(
                        blank=True, db_column="numberofrooms", null=True
                    ),
                ),
                (
                    "owner_name",
                    models.CharField(
                        blank=True, db_column="ownername", max_length=1000, null=True
                    ),
                ),
                (
                    "ownership_type",
                    models.CharField(
                        blank=True,
                        db_column="ownershiptype",
                        max_length=1000,
                        null=True,
                    ),
                ),
                (
                    "ownership_type_codespace",
                    models.CharField(
                        blank=True,
                        db_column="ownershiptype_codespace",
                        max_length=1000,
                        null=True,
                    ),
                ),
            ],
            options={
                "db_table": "ng_buildingunit",
                "managed": False,
            },
            bases=("citydb.cityobject",),
        ),
        migrations.CreateModel(
            name="EnergyDemand",
            fields=[
                (
                    "_parent_link",
                    models.OneToOneField(
                        db_column="id",
                        default=None,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="energy_demand_obj",
                        serialize=False,
                        to="citydb.cityobject",
                    ),
                ),
                (
                    "end_use",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("domesticHotWater", "domesticHotWater"),
                            ("electricalAppliances", "electricalAppliances"),
                            ("lighting", "lighting"),
                            (
                                "otherOrCombinationElectrical",
                                "otherOrCombinationElectrical",
                            ),
                            ("otherOrCombinationHeating", "otherOrCombinationHeating"),
                            ("otherOrCombinationCooling", "otherOrCombinationCooling"),
                            ("spaceCooling", "spaceCooling"),
                            ("spaceHeating", "spaceHeating"),
                            ("ventilation", "ventilation"),
                            ("ventilationHeating", "ventilationHeating"),
                            ("ventilationCooling", "ventilationCooling"),
                            ("process", "process"),
                        ],
                        db_column="enduse",
                        max_length=1000,
                        null=True,
                    ),
                ),
                (
                    "energy_carrier_type",
                    models.CharField(
                        blank=True,
                        db_column="energycarriertype",
                        max_length=1000,
                        null=True,
                    ),
                ),
                (
                    "energy_carrier_type_codespace",
                    models.CharField(
                        blank=True,
                        db_column="energycarriertype_codespace",
                        max_length=1000,
                        null=True,
                    ),
                ),
                (
                    "maximum_load",
                    models.FloatField(blank=True, db_column="maximumload", null=True),
                ),
                (
                    "maximum_load_uom",
                    models.FloatField(
                        blank=True, db_column="maximumload_uom", null=True
                    ),
                ),
            ],
            options={
                "db_table": "ng_energydemand",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Facilities",
            fields=[
                (
                    "_parent_link",
                    models.OneToOneField(
                        db_column="id",
                        default=None,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="facilities_obj",
                        serialize=False,
                        to="citydb.cityobject",
                    ),
                ),
                (
                    "electrical_power",
                    models.FloatField(
                        blank=True, db_column="electricalpower", null=True
                    ),
                ),
                (
                    "electrical_power_uom",
                    models.CharField(
                        blank=True,
                        db_column="electricalpower_uom",
                        max_length=1000,
                        null=True,
                    ),
                ),
            ],
            options={
                "db_table": "ng_facilities",
                "managed": False,
            },
            bases=("citydb.cityobject",),
        ),
        migrations.CreateModel(
            name="Layer",
            fields=[
                (
                    "_parent_link",
                    models.OneToOneField(
                        db_column="id",
                        default=None,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="layer_obj",
                        serialize=False,
                        to="citydb.cityobject",
                    ),
                ),
                ("ordered_position", models.IntegerField(blank=True, null=True)),
            ],
            options={
                "db_table": "ng_layer",
                "managed": False,
            },
            bases=("citydb.cityobject",),
        ),
        migrations.CreateModel(
            name="LayerComponent",
            fields=[
                (
                    "_parent_link",
                    models.OneToOneField(
                        db_column="id",
                        default=None,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="layer_component_obj",
                        serialize=False,
                        to="citydb.cityobject",
                    ),
                ),
                (
                    "area_fraction",
                    models.FloatField(blank=True, db_column="areafraction", null=True),
                ),
                (
                    "area_fraction_uom",
                    models.CharField(
                        blank=True,
                        db_column="areafraction_uom",
                        max_length=1000,
                        null=True,
                    ),
                ),
                ("thickness", models.FloatField(blank=True, null=True)),
                (
                    "thickness_uom",
                    models.CharField(blank=True, max_length=1000, null=True),
                ),
            ],
            options={
                "db_table": "ng_layercomponent",
                "managed": False,
            },
            bases=("citydb.cityobject",),
        ),
        migrations.CreateModel(
            name="NgCityObject",
            fields=[
                (
                    "id",
                    models.OneToOneField(
                        db_column="id",
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to="citydb.cityobject",
                    ),
                ),
            ],
            options={
                "db_table": "ng_cityobject",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Occupants",
            fields=[
                (
                    "_parent_link",
                    models.OneToOneField(
                        db_column="id",
                        default=None,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="occupants_obj",
                        serialize=False,
                        to="citydb.cityobject",
                    ),
                ),
                (
                    "number_of_occupants",
                    models.IntegerField(
                        blank=True, db_column="numberofoccupants", null=True
                    ),
                ),
            ],
            options={
                "db_table": "ng_occupants",
                "managed": False,
            },
            bases=("citydb.cityobject",),
        ),
        migrations.CreateModel(
            name="Opening",
            fields=[
                (
                    "_parent_link",
                    models.OneToOneField(
                        db_column="id",
                        default=None,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="opening_obj",
                        serialize=False,
                        to="citydb.cityobject",
                    ),
                ),
            ],
            options={
                "db_table": "opening",
                "managed": False,
            },
            bases=("citydb.cityobject",),
        ),
        migrations.CreateModel(
            name="ServiceLife",
            fields=[
                (
                    "_parent_link",
                    models.OneToOneField(
                        db_column="id",
                        default=None,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="service_life_obj",
                        serialize=False,
                        to="citydb.cityobject",
                    ),
                ),
                (
                    "lifeexpectancy",
                    models.DecimalField(
                        blank=True, decimal_places=65535, max_digits=65535, null=True
                    ),
                ),
                ("lifeexpectancy_factor", models.IntegerField(blank=True, null=True)),
                ("lifeexpectancy_radix", models.IntegerField(blank=True, null=True)),
                (
                    "lifeexpectancy_unit",
                    models.CharField(blank=True, max_length=1000, null=True),
                ),
                (
                    "mainmaintenanceinterv_factor",
                    models.IntegerField(blank=True, null=True),
                ),
                (
                    "mainmaintenanceinterva_radix",
                    models.IntegerField(blank=True, null=True),
                ),
                (
                    "mainmaintenanceinterval",
                    models.DecimalField(
                        blank=True, decimal_places=65535, max_digits=65535, null=True
                    ),
                ),
                (
                    "mainmaintenanceinterval_unit",
                    models.CharField(blank=True, max_length=1000, null=True),
                ),
                (
                    "startoflife",
                    models.CharField(blank=True, max_length=1000, null=True),
                ),
                (
                    "startoflife_calendareraname",
                    models.CharField(blank=True, max_length=1000, null=True),
                ),
                (
                    "startoflife_frame",
                    models.CharField(blank=True, max_length=1000, null=True),
                ),
                (
                    "startoflife_indeterminatepos",
                    models.CharField(blank=True, max_length=1000, null=True),
                ),
            ],
            options={
                "db_table": "ng_servicelife",
                "managed": False,
            },
            bases=("citydb.cityobject",),
        ),
        migrations.CreateModel(
            name="SystemOperation",
            fields=[
                (
                    "_parent_link",
                    models.OneToOneField(
                        db_column="id",
                        default=None,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="_system_operation_obj",
                        serialize=False,
                        to="citydb.cityobject",
                    ),
                ),
                (
                    "end_use",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("domesticHotWater", "domesticHotWater"),
                            ("electricalAppliances", "electricalAppliances"),
                            ("lighting", "lighting"),
                            (
                                "otherOrCombinationElectrical",
                                "otherOrCombinationElectrical",
                            ),
                            ("otherOrCombinationHeating", "otherOrCombinationHeating"),
                            ("otherOrCombinationCooling", "otherOrCombinationCooling"),
                            ("spaceCooling", "spaceCooling"),
                            ("spaceHeating", "spaceHeating"),
                            ("ventilation", "ventilation"),
                            ("ventilationHeating", "ventilationHeating"),
                            ("ventilationCooling", "ventilationCooling"),
                            ("process", "process"),
                        ],
                        db_column="enduse",
                        max_length=1000,
                        null=True,
                    ),
                ),
                (
                    "yearly_global_efficiency",
                    models.FloatField(
                        blank=True, db_column="yearlyglobalefficiency", null=True
                    ),
                ),
            ],
            options={
                "db_table": "ng_systemoperation",
                "managed": False,
            },
            bases=("citydb.cityobject",),
        ),
        migrations.CreateModel(
            name="ThematicSurface",
            fields=[
                (
                    "_parent_link",
                    models.OneToOneField(
                        db_column="id",
                        default=None,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="thematicsurface_obj",
                        serialize=False,
                        to="citydb.cityobject",
                    ),
                ),
            ],
            options={
                "db_table": "thematic_surface",
                "managed": False,
            },
            bases=("citydb.cityobject",),
        ),
        migrations.CreateModel(
            name="ThermalBoundary",
            fields=[
                (
                    "_parent_link",
                    models.OneToOneField(
                        db_column="id",
                        default=None,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="thermal_boundary_obj",
                        serialize=False,
                        to="citydb.cityobject",
                    ),
                ),
                ("area", models.FloatField(blank=True, null=True)),
                ("area_uom", models.CharField(blank=True, max_length=1000, null=True)),
                ("azimuth", models.FloatField(blank=True, null=True)),
                (
                    "azimuth_uom",
                    models.CharField(blank=True, max_length=1000, null=True),
                ),
                ("inclination", models.FloatField(blank=True, null=True)),
                (
                    "inclination_uom",
                    models.CharField(blank=True, max_length=1000, null=True),
                ),
                (
                    "thermal_boundary_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("interiorWall", "interiorWall"),
                            ("intermediateFloor", "intermediateFloor"),
                            ("intermediateCeiling", "intermediateCeiling"),
                            ("sharedWall", "sharedWall"),
                            ("outerWall", "outerWall"),
                            ("door", "door"),
                            ("groundSlab", "groundSlab"),
                            ("basementCeiling", "basementCeiling"),
                            ("atticFloor", "atticFloor"),
                            ("roof", "roof"),
                        ],
                        db_column="thermalboundarytype",
                        max_length=1000,
                        null=True,
                    ),
                ),
            ],
            options={
                "db_table": "ng_thermalboundary",
                "managed": False,
            },
            bases=("citydb.cityobject",),
        ),
        migrations.CreateModel(
            name="ThermalOpening",
            fields=[
                (
                    "_parent_link",
                    models.OneToOneField(
                        db_column="id",
                        default=None,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="thermal_opening_obj",
                        serialize=False,
                        to="citydb.cityobject",
                    ),
                ),
                ("area", models.FloatField(blank=True, null=True)),
                ("area_uom", models.CharField(blank=True, max_length=1000, null=True)),
                (
                    "openable_ratio",
                    models.FloatField(blank=True, db_column="openableratio", null=True),
                ),
                (
                    "openable_ratio_uom",
                    models.CharField(
                        blank=True,
                        db_column="openableratio_uom",
                        max_length=1000,
                        null=True,
                    ),
                ),
            ],
            options={
                "db_table": "ng_thermalopening",
                "managed": False,
            },
            bases=("citydb.cityobject",),
        ),
        migrations.CreateModel(
            name="ThermalZone",
            fields=[
                (
                    "_parent_link",
                    models.OneToOneField(
                        db_column="id",
                        default=None,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="thermal_zone_obj",
                        serialize=False,
                        to="citydb.cityobject",
                    ),
                ),
                (
                    "_is_cooled",
                    models.IntegerField(blank=True, db_column="iscooled", null=True),
                ),
                (
                    "_is_heated",
                    models.IntegerField(blank=True, db_column="isheated", null=True),
                ),
                (
                    "_is_ventilated",
                    models.IntegerField(
                        blank=True, db_column="isventilated", null=True
                    ),
                ),
                (
                    "additional_thermal_bridge_uvalue",
                    models.DecimalField(
                        blank=True,
                        db_column="additionalthermalbridgeuvalu",
                        decimal_places=65535,
                        max_digits=65535,
                        null=True,
                    ),
                ),
                (
                    "additional_thermal_bridge_u_value_uom",
                    models.CharField(
                        blank=True,
                        db_column="additionalthermalbridgeu_uom",
                        max_length=1000,
                        null=True,
                    ),
                ),
                (
                    "effective_thermal_capacity",
                    models.DecimalField(
                        blank=True,
                        db_column="effectivethermalcapacity",
                        decimal_places=65535,
                        max_digits=65535,
                        null=True,
                    ),
                ),
                (
                    "effective_thermal_capacity_uom",
                    models.CharField(
                        blank=True,
                        db_column="effectivethermalcapacity_uom",
                        max_length=1000,
                        null=True,
                    ),
                ),
                (
                    "indirectly_heated_area_ratio",
                    models.DecimalField(
                        blank=True,
                        db_column="indirectlyheatedarearatio",
                        decimal_places=65535,
                        max_digits=65535,
                        null=True,
                    ),
                ),
                (
                    "indirectly_heated_area_ratio_uom",
                    models.CharField(
                        blank=True,
                        db_column="indirectlyheatedarearati_uom",
                        max_length=1000,
                        null=True,
                    ),
                ),
                (
                    "infiltration_rate",
                    models.FloatField(
                        blank=True, db_column="infiltrationrate", null=True
                    ),
                ),
                (
                    "infiltration_rate_uom",
                    models.CharField(
                        blank=True,
                        db_column="infiltrationrate_uom",
                        max_length=1000,
                        null=True,
                    ),
                ),
            ],
            options={
                "db_table": "ng_thermalzone",
                "managed": False,
            },
            bases=("citydb.cityobject",),
        ),
        migrations.CreateModel(
            name="TimeSeries",
            fields=[
                (
                    "_parent_link",
                    models.OneToOneField(
                        db_column="id",
                        default=None,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="timeseries_obj",
                        serialize=False,
                        to="citydb.cityobject",
                    ),
                ),
                (
                    "acquisition_method",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("measurement", "measurement"),
                            ("simulation", "simulation"),
                            ("calibratedSimulation", "calibratedSimulation"),
                            ("estimation", "estimation"),
                            ("unknown", "unknown"),
                        ],
                        db_column="timevaluesprop_acquisitionme",
                        max_length=1000,
                        null=True,
                    ),
                ),
                (
                    "interpolation_type",
                    models.CharField(
                        blank=True,
                        db_column="timevaluesprop_interpolation",
                        max_length=1000,
                        null=True,
                    ),
                ),
                (
                    "quality_description",
                    models.CharField(
                        blank=True,
                        db_column="timevaluesprop_qualitydescri",
                        max_length=1000,
                        null=True,
                    ),
                ),
                (
                    "thematic_description",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Power", "Power"),
                            ("Energy", "Energy"),
                            ("TemperatureDifference", "TemperatureDifference"),
                            ("VolumeFlow", "VolumeFlow"),
                            ("TotalVolume", "TotalVolume"),
                            ("FlowTemperature", "FlowTemperature"),
                            ("ReturnTemperature", "ReturnTemperature"),
                            ("Schedule", "Schedule"),
                            ("AreaSpecificEnergy", "AreaSpecificEnergy"),
                        ],
                        db_column="timevaluesprop_thematicdescr",
                        max_length=1000,
                        null=True,
                    ),
                ),
                (
                    "source",
                    models.CharField(
                        blank=True,
                        db_column="timevaluespropertiest_source",
                        max_length=1000,
                        null=True,
                    ),
                ),
            ],
            options={
                "db_table": "ng_timeseries",
                "managed": False,
            },
            bases=("citydb.cityobject",),
        ),
        migrations.CreateModel(
            name="TimeSeriesSchedule",
            fields=[
                (
                    "_parent_link",
                    models.OneToOneField(
                        db_column="id",
                        default=None,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="schedule_obj",
                        serialize=False,
                        to="citydb.cityobject",
                    ),
                ),
            ],
            options={
                "db_table": "ng_schedule",
                "managed": False,
            },
            bases=("citydb.cityobject",),
        ),
        migrations.CreateModel(
            name="UsageZone",
            fields=[
                (
                    "_parent_link",
                    models.OneToOneField(
                        db_column="id",
                        default=None,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="usagezone_obj",
                        serialize=False,
                        to="citydb.cityobject",
                    ),
                ),
                (
                    "usage_zone_type",
                    models.CharField(
                        blank=True,
                        db_column="usagezonetype",
                        max_length=1000,
                        null=True,
                    ),
                ),
                (
                    "usage_zone_type_codespace",
                    models.CharField(
                        blank=True,
                        db_column="usagezonetype_codespace",
                        max_length=1000,
                        null=True,
                    ),
                ),
            ],
            options={
                "db_table": "ng_usagezone",
                "managed": False,
            },
            bases=("citydb.cityobject",),
        ),
        migrations.CreateModel(
            name="WeatherData",
            fields=[
                (
                    "_parent_link",
                    models.OneToOneField(
                        db_column="id",
                        default=None,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="weather_data_obj",
                        serialize=False,
                        to="citydb.cityobject",
                    ),
                ),
                (
                    "position",
                    django.contrib.gis.db.models.fields.PointField(
                        blank=True, db_column="position", dim=3, null=True, srid=25832
                    ),
                ),
                (
                    "weather_data_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("precipitationIntensity", "precipitationIntensity"),
                            ("precipitationQuantity", "precipitationQuantity"),
                            ("dewPointTemperature", "dewPointTemperature"),
                            ("airTemperature", "airTemperature"),
                            ("windSpeed", "windSpeed"),
                            ("windDirection", "windDirection"),
                            ("airPressure", "airPressure"),
                            ("humidity", "humidity"),
                            ("windSpeed", "windSpeed"),
                            ("cloudiness", "cloudiness"),
                            ("globalSolarIrradiance", "globalSolarIrradiance"),
                            ("directSolarIrradiance", "directSolarIrradiance"),
                            ("diffuseSolarIrradiance", "diffuseSolarIrradiance"),
                            ("terrestrialEmission", "terrestrialEmission"),
                            (
                                "downwardTerrestrialRadiation",
                                "downwardTerrestrialRadiation",
                            ),
                            ("daylightIlluminance", "daylightIlluminance"),
                        ],
                        db_column="weatherdatatype",
                        max_length=1000,
                        null=True,
                    ),
                ),
            ],
            options={
                "db_table": "ng_weatherdata",
                "managed": False,
            },
            bases=("citydb.cityobject",),
        ),
        migrations.CreateModel(
            name="WeatherStation",
            fields=[
                (
                    "_parent_link",
                    models.OneToOneField(
                        db_column="id",
                        default=None,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="weather_station_obj",
                        serialize=False,
                        to="citydb.cityobject",
                    ),
                ),
                (
                    "position",
                    django.contrib.gis.db.models.fields.PointField(
                        blank=True, db_column="position", dim=3, null=True, srid=25832
                    ),
                ),
                (
                    "station_name",
                    models.CharField(
                        blank=True, db_column="stationname", max_length=1000, null=True
                    ),
                ),
            ],
            options={
                "db_table": "ng_weatherstation",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Construction",
            fields=[
                (
                    "_abst_const",
                    models.OneToOneField(
                        db_column="id",
                        default=None,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="construction_obj",
                        serialize=False,
                        to="citydb.abstractconstruction",
                    ),
                ),
                (
                    "u_value",
                    models.FloatField(blank=True, db_column="uvalue", null=True),
                ),
                (
                    "u_value_uom",
                    models.CharField(
                        blank=True, db_column="uvalue_uom", max_length=1000, null=True
                    ),
                ),
            ],
            options={
                "db_table": "ng_construction_1",
                "managed": False,
            },
            bases=("citydb.abstractconstruction",),
        ),
        migrations.CreateModel(
            name="EnergyConversionSystem",
            fields=[
                (
                    "_abst_conv_sys",
                    models.OneToOneField(
                        db_column="id",
                        default=None,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="energy_conversion_system_obj",
                        serialize=False,
                        to="citydb.abstractenergysystem",
                    ),
                ),
                (
                    "efficiency_indicator",
                    models.CharField(
                        blank=True,
                        db_column="efficiencyindicator",
                        max_length=1000,
                        null=True,
                    ),
                ),
                (
                    "has_condensation",
                    models.FloatField(
                        blank=True, db_column="hascondensation", null=True
                    ),
                ),
                (
                    "installed_power",
                    models.FloatField(
                        blank=True, db_column="installedpower", null=True
                    ),
                ),
                (
                    "installed_power_uom",
                    models.CharField(
                        blank=True,
                        db_column="installedpower_uom",
                        max_length=1000,
                        null=True,
                    ),
                ),
                (
                    "nominal_efficiency",
                    models.FloatField(
                        blank=True, db_column="nominalefficiency", null=True
                    ),
                ),
                (
                    "nominal_efficiency_uom",
                    models.CharField(
                        blank=True,
                        db_column="nominalefficiency_uom",
                        max_length=1000,
                        null=True,
                    ),
                ),
            ],
            options={
                "db_table": "ng_energyconversionsyst",
                "managed": False,
            },
            bases=("citydb.abstractenergysystem",),
        ),
        migrations.CreateModel(
            name="Gas",
            fields=[
                (
                    "_abst_material",
                    models.OneToOneField(
                        db_column="id",
                        default=None,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="gas_abstract",
                        serialize=False,
                        to="citydb.abstractmaterial",
                    ),
                ),
                (
                    "is_ventilated",
                    models.FloatField(blank=True, db_column="isventilated", null=True),
                ),
                (
                    "r_value",
                    models.FloatField(blank=True, db_column="rvalue", null=True),
                ),
                (
                    "r_value_uom",
                    models.CharField(
                        blank=True, db_column="rvalue_uom", max_length=1000, null=True
                    ),
                ),
            ],
            options={
                "db_table": "ng_gas",
                "managed": False,
            },
            bases=("citydb.abstractmaterial",),
        ),
        migrations.CreateModel(
            name="SolidMaterial",
            fields=[
                (
                    "_abst_material",
                    models.OneToOneField(
                        db_column="id",
                        default=None,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="solid_material_abstract",
                        serialize=False,
                        to="citydb.abstractmaterial",
                    ),
                ),
                ("conductivity", models.FloatField(blank=True, null=True)),
                (
                    "conductivity_uom",
                    models.CharField(blank=True, max_length=1000, null=True),
                ),
                ("density", models.FloatField(blank=True, null=True)),
                (
                    "density_uom",
                    models.CharField(blank=True, max_length=1000, null=True),
                ),
                (
                    "embodied_carbon",
                    models.FloatField(
                        blank=True, db_column="embodiedcarbon", null=True
                    ),
                ),
                (
                    "embodied_carbon_uom",
                    models.CharField(
                        blank=True,
                        db_column="embodiedcarbon_uom",
                        max_length=1000,
                        null=True,
                    ),
                ),
                (
                    "embodied_energy",
                    models.FloatField(
                        blank=True, db_column="embodiedenergy", null=True
                    ),
                ),
                (
                    "embodied_energy_uom",
                    models.CharField(
                        blank=True,
                        db_column="embodiedenergy_uom",
                        max_length=1000,
                        null=True,
                    ),
                ),
                ("permeance", models.FloatField(blank=True, null=True)),
                (
                    "permeance_uom",
                    models.CharField(blank=True, max_length=1000, null=True),
                ),
                ("porosity", models.FloatField(blank=True, null=True)),
                (
                    "porosity_uom",
                    models.CharField(blank=True, max_length=1000, null=True),
                ),
                (
                    "specific_heat",
                    models.FloatField(blank=True, db_column="specificheat", null=True),
                ),
                (
                    "specific_heat_uom",
                    models.CharField(
                        blank=True,
                        db_column="specificheat_uom",
                        max_length=1000,
                        null=True,
                    ),
                ),
            ],
            options={
                "db_table": "ng_solidmaterial",
                "managed": False,
            },
            bases=("citydb.abstractmaterial",),
        ),
        migrations.CreateModel(
            name="EnergyBuilding",
            fields=[
                (
                    "_parent_link_eb",
                    models.OneToOneField(
                        db_column="id",
                        default=None,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="building_energy_obj",
                        serialize=False,
                        to="citydb.building",
                    ),
                ),
                (
                    "building_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Office", "Office"),
                            ("Institute", "Institute"),
                            ("Institute4", "Institute4"),
                            ("Institute8", "Institute8"),
                            ("SingleFamilyDwelling", "SingleFamilyDwelling"),
                            ("SingleFamilyHouse", "SingleFamilyHouse"),
                            ("MultiFamilyHouse", "MultiFamilyHouse"),
                            ("Apartmentblock", "Apartmentblock"),
                        ],
                        db_column="buildingtype",
                        max_length=1000,
                        null=True,
                    ),
                ),
                (
                    "building_type_codespace",
                    models.CharField(
                        blank=True,
                        db_column="buildingtype_codespace",
                        max_length=1000,
                        null=True,
                    ),
                ),
                (
                    "construction_weight",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("veryLight", "veryLight"),
                            ("light", "light"),
                            ("medium", "medium"),
                            ("heavy", "heavy"),
                        ],
                        db_column="constructionweight",
                        max_length=1000,
                        null=True,
                    ),
                ),
                (
                    "reference_point",
                    django.contrib.gis.db.models.fields.PointField(
                        blank=True,
                        db_column="referencepoint",
                        dim=3,
                        null=True,
                        srid=25832,
                    ),
                ),
            ],
            options={
                "db_table": "ng_building",
                "managed": False,
            },
            bases=("citydb.building",),
        ),
        migrations.CreateModel(
            name="DHWFacilities",
            fields=[
                (
                    "_abst_facilities",
                    models.OneToOneField(
                        db_column="id",
                        default=None,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="DHW_abstract",
                        serialize=False,
                        to="citydb.facilities",
                    ),
                ),
                (
                    "number_of_baths",
                    models.IntegerField(
                        blank=True, db_column="numberofbaths", null=True
                    ),
                ),
                (
                    "number_of_showers",
                    models.IntegerField(
                        blank=True, db_column="numberofshowers", null=True
                    ),
                ),
                (
                    "number_of_wash_basins",
                    models.IntegerField(
                        blank=True, db_column="numberofwashbasins", null=True
                    ),
                ),
                (
                    "water_storage_volume",
                    models.FloatField(
                        blank=True, db_column="waterstoragevolume", null=True
                    ),
                ),
                (
                    "water_storage_volume_uom",
                    models.CharField(
                        blank=True,
                        db_column="waterstoragevolume_uom",
                        max_length=1000,
                        null=True,
                    ),
                ),
            ],
            options={
                "db_table": "ng_dhwfacilities",
                "managed": False,
            },
            bases=("citydb.facilities",),
        ),
        migrations.CreateModel(
            name="IrregularTimeSeriesFile",
            fields=[
                (
                    "_abst_time_series",
                    models.OneToOneField(
                        db_column="id",
                        default=None,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="time_series_file",
                        serialize=False,
                        to="citydb.timeseries",
                    ),
                ),
                (
                    "decimal_symbol",
                    models.CharField(
                        blank=True,
                        db_column="decimalsymbol",
                        max_length=1000,
                        null=True,
                    ),
                ),
                (
                    "field_separator",
                    models.CharField(
                        blank=True,
                        db_column="fieldseparator",
                        max_length=1000,
                        null=True,
                    ),
                ),
                (
                    "file_id",
                    models.CharField(
                        blank=True, db_column="file_", max_length=1000, null=True
                    ),
                ),
                (
                    "number_of_header_lines",
                    models.IntegerField(
                        blank=True, db_column="numberofheaderlines", null=True
                    ),
                ),
                (
                    "record_separator",
                    models.CharField(
                        blank=True,
                        db_column="recordseparator",
                        max_length=1000,
                        null=True,
                    ),
                ),
                (
                    "time_column_number",
                    models.IntegerField(
                        blank=True, db_column="timecolumnnumber", null=True
                    ),
                ),
                (
                    "uom",
                    models.CharField(
                        blank=True, db_column="uom", max_length=1000, null=True
                    ),
                ),
                (
                    "value_column_number",
                    models.IntegerField(
                        blank=True, db_column="valuecolumnnumber", null=True
                    ),
                ),
            ],
            options={
                "db_table": "ng_irregulartimeseriesf",
                "managed": False,
            },
            bases=("citydb.timeseries",),
        ),
        migrations.CreateModel(
            name="RegularTimeSeries",
            fields=[
                (
                    "_abst_time_series",
                    models.OneToOneField(
                        db_column="id",
                        default=None,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="regular_time_series",
                        serialize=False,
                        to="citydb.timeseries",
                    ),
                ),
                (
                    "timeinterval",
                    models.IntegerField(
                        blank=True, db_column="timeinterval", null=True
                    ),
                ),
                (
                    "timeinterval_unit",
                    models.CharField(
                        blank=True,
                        db_column="timeinterval_unit",
                        max_length=1000,
                        null=True,
                    ),
                ),
                (
                    "timeinterval_factor",
                    models.IntegerField(
                        blank=True, db_column="timeinterval_factor", null=True
                    ),
                ),
                (
                    "timeinterval_radix",
                    models.IntegerField(
                        blank=True, db_column="timeinterval_radix", null=True
                    ),
                ),
                (
                    "timeperiodprop_beginposition",
                    models.DateTimeField(db_column="timeperiodprop_beginposition"),
                ),
                (
                    "timeperiodproper_endposition",
                    models.DateTimeField(db_column="timeperiodproper_endposition"),
                ),
                (
                    "values_uom",
                    models.CharField(
                        blank=True, db_column="values_uom", max_length=1000, null=True
                    ),
                ),
                (
                    "values",
                    models.TextField(blank=True, db_column="values_", null=True),
                ),
            ],
            options={
                "db_table": "ng_regulartimeseries",
                "managed": False,
            },
            bases=("citydb.timeseries",),
        ),
        migrations.CreateModel(
            name="HeatExchanger",
            fields=[
                (
                    "_energy_system",
                    models.OneToOneField(
                        db_column="id",
                        default=None,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="heat_exchanger_obj",
                        serialize=False,
                        to="citydb.energyconversionsystem",
                    ),
                ),
                (
                    "network_id",
                    models.CharField(
                        blank=True, db_column="networkid", max_length=1000, null=True
                    ),
                ),
                (
                    "network_node_id",
                    models.CharField(
                        blank=True,
                        db_column="networknodeid",
                        max_length=1000,
                        null=True,
                    ),
                ),
                (
                    "primary_heat_supplier",
                    models.CharField(
                        blank=True,
                        db_column="primaryheatsupplier",
                        max_length=1000,
                        null=True,
                    ),
                ),
            ],
            options={
                "db_table": "ng_heatexchanger",
                "managed": False,
            },
            bases=("citydb.energyconversionsystem",),
        ),
        migrations.CreateModel(
            name="MechanicalVentilation",
            fields=[
                (
                    "_energy_system",
                    models.OneToOneField(
                        db_column="id",
                        default=None,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="mechanical_ventilation_obj",
                        serialize=False,
                        to="citydb.energyconversionsystem",
                    ),
                ),
                (
                    "_has_heat_recovery",
                    models.IntegerField(
                        blank=True, db_column="hasheatrecovery", null=True
                    ),
                ),
                (
                    "recuperation_factor",
                    models.FloatField(
                        blank=True, db_column="recuperationfactor", null=True
                    ),
                ),
                (
                    "recuperation_factor_uom",
                    models.CharField(
                        blank=True,
                        db_column="recuperationfactor_uom",
                        max_length=1000,
                        null=True,
                    ),
                ),
                (
                    "_humidification",
                    models.IntegerField(
                        blank=True, db_column="humidification", null=True
                    ),
                ),
                (
                    "_dehumidification",
                    models.IntegerField(
                        blank=True, db_column="dehumidification", null=True
                    ),
                ),
            ],
            options={
                "db_table": "ng_mechanicalventilatio",
                "managed": False,
            },
            bases=("citydb.energyconversionsystem",),
        ),
    ]
